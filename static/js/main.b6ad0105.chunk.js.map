{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","i","robot","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setRobots","setSearchField","useEffect","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","length","event","target","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBS,SAASC,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACvC,OACE,sBAAKC,UAAU,qDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACE,6BAAKJ,IACL,4BAAIC,UCJG,SAASI,EAAT,GAA+B,IAAXC,EAAU,EAAVA,OAE3BC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,IAAMC,EAAQL,EAAOI,GAErB,OACE,cAACZ,EAAD,CAAcC,GAAIY,EAAMZ,GAAIC,KAAMW,EAAMX,KAAMC,MAAOU,EAAMV,OAAhDS,MAIf,OACE,8BACGH,ICdQ,SAASK,EAAT,GAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC/C,OACE,qBAAKZ,UAAU,MAAf,SACE,uBAAOA,UAAU,0BAA0Ba,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCHtF,SAASI,EAAOC,GAC7B,OACE,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,SAA3C,SACGH,EAAMI,W,gCCiBEC,E,kDAnBb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,mEAEFG,KAAKV,MAAMI,a,GAhBMQ,a,MCOb,SAASC,IAAO,IAAD,EACAC,mBAAS,IADT,mBACrB3B,EADqB,KACb4B,EADa,OAEUD,mBAAS,IAFnB,mBAErBpB,EAFqB,KAERsB,EAFQ,KAI5BC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIP,EAAUO,QAC1B,IAEH,IAIMC,EAAepC,EAAOqC,QAAO,SAAAhC,GACjC,OAAOA,EAAMX,KAAK4C,cAAcC,SAAShC,EAAY+B,kBAGvD,OAAQtC,EAAOwC,OAGX,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAACU,EAAD,CAAWE,aAbM,SAACiC,GACtBZ,EAAeY,EAAMC,OAAOC,UAaxB,cAAC/B,EAAD,UACE,cAAC,EAAD,UACE,cAACb,EAAD,CAAUC,OAAQoC,WAP1B,oBAAIxC,UAAU,KAAd,qB,YCnBJgD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SP0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.b6ad0105.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nexport default function Card({ id, name, email }) {\r\n  return (\r\n    <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw3 shadow-7\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nexport default function CardList({ robots }) {\r\n\r\n  const cardComponent = robots.map((user, i) => {\r\n    const robot = robots[i];\r\n    \r\n    return (\r\n      <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\n\r\nexport default function SearchBox({ searchField, searchChange }) {\r\n  return (\r\n    <div className='pa2'>\r\n      <input className='pa3 ba b--green bg blue' type='search' placeholder='search robots' onChange={searchChange} />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true});\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops, something has gone wrong...</h1>\r\n    }\r\n    return this.props.children;\r\n  };\r\n};\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  const [robots, setRobots] = useState([]);\r\n  const [searchField, setSearchField] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => setRobots(users));\r\n  }, []);\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value);\r\n  };\r\n  \r\n  const filterRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  return !robots.length ? \r\n    <h1 className='tc'>LOADING</h1> :\r\n      (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filterRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nimport './index.css';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, change unregister() to register() below. \nserviceWorker.unregister();\n"],"sourceRoot":""}